(defpackage "TINYWL"
  (:use "CL"))
(in-package "TINYWL")

(defvar *display* nil)
(defvar *backend* nil)
(defvar *renderer* nil)
(defvar *allocator* nil)
(defvar *output-layout* nil)
(defvar *scene* nil)
(defvar *scene-layout* nil)
(defvar *xdg-shell* nil)
(defvar *cursor* nil)
(defvar *cursor-manager* nil)
(defvar *cursor-mode* :passthrough)
(defvar *seat* nil)

(cffi:defcallback server-new-output :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "New output created~%"))

(cffi:defcallback server-new-xdg-toplevel :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "New XDG toplevel created~%"))

(cffi:defcallback server-new-xdg-popup :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "New XDG popup created~%"))

(cffi:defcallback server-new-input :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "New input device created~%"))

(cffi:defcallback server-cursor-motion :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Cursor motion event~%"))

(cffi:defcallback server-cursor-motion-absolute :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Cursor absolute motion event~%"))

(cffi:defcallback server-cursor-button :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Cursor button event~%"))

(cffi:defcallback server-cursor-axis :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Cursor axis event~%"))

(cffi:defcallback server-cursor-frame :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Cursor frame event~%"))

(cffi:defcallback seat-request-set-cursor :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Seat requested set cursor~%"))

(cffi:defcallback seat-request-set-selection :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Seat requested set selection~%"))

(defun main ()
  (setf *display* (wl:display-create))
  (when (cffi:null-pointer-p *display*)
    (error "Failed to create Wayland display"))
  (setf *backend* (wlr:backend-autocreate (wl:display-get-event-loop *display*)
                                          (cffi:null-pointer)))
  (when (cffi:null-pointer-p *backend*)
    (error "Failed to create wlr_backend"))
  (setf *renderer* (wlr:renderer-autocreate *backend*))
  (when (cffi:null-pointer-p *renderer*)
    (error "Failed to create wlr_renderer"))
  (wlr:renderer-init-wl-display *renderer* *display*)
  (setf *allocator* (wlr:allocator-autocreate *backend* *renderer*))
  (when (cffi:null-pointer-p *allocator*)
    (error "Failed to create wlr_allocator"))
  (wlr:compositor-create *display* 5 *renderer*)
  (wlr:subcompositor-create *display*)
  (wlr:data-device-manager-create *display*)

  (setf *output-layout* (wlr:output-layout-create *display*))
  (let ((new-output-listener (cffi:foreign-alloc '(:struct wl:listener))))
    (setf (cffi:foreign-slot-value new-output-listener '(:struct wl:listener) :notify) 
          (cffi:callback server-new-output))
    (wl:signal-add (wlr:event-signal *backend* wlr:backend :new-output) 
                   new-output-listener))
  
  (setf *scene* (wlr:scene-create))
  (setf *scene-layout* (wlr:scene-attach-output-layout *scene* *output-layout*))
  
  (setf *xdg-shell* (wlr:xdg-shell-create *display* 3))
  (let ((new-xdg-toplevel (cffi:foreign-alloc '(:struct wl:listener)))
        (new-xdg-popup (cffi:foreign-alloc '(:struct wl:listener))))
    (setf (cffi:foreign-slot-value new-xdg-toplevel '(:struct wl:listener) :notify)
          (cffi:callback server-new-xdg-toplevel)
          (cffi:foreign-slot-value new-xdg-popup '(:struct wl:listener) :notify)
          (cffi:callback server-new-xdg-popup))
    (wl:signal-add (wlr:event-signal *xdg-shell* wlr:xdg-shell :new-toplevel)
                   new-xdg-toplevel)
    (wl:signal-add (wlr:event-signal *xdg-shell* wlr:xdg-shell :new-popup)
                   new-xdg-popup))
  (let ((new-xdg-toplevel (cffi:foreign-alloc '(:struct wl:listener))))
    (setf (cffi:foreign-slot-value new-xdg-toplevel '(:struct wl:listener) :notify)
          (cffi:callback server-new-xdg-toplevel))
    (wl:signal-add (wlr:event-signal *xdg-shell* wlr:xdg-shell :new-toplevel)
                   new-xdg-toplevel))
  
  (setf *cursor* (wlr:cursor-create))
  (wlr:cursor-attach-output-layout *cursor* *output-layout*)
  (setf *cursor-manager* (wlr:xcursor-manager-create (cffi:null-pointer) 24))

  (let ((cursor-motion (cffi:foreign-alloc '(:struct wl:listener)))
        (cursor-motion-absolute (cffi:foreign-alloc '(:struct wl:listener)))
        (cursor-button (cffi:foreign-alloc '(:struct wl:listener)))
        (cursor-axis (cffi:foreign-alloc '(:struct wl:listener)))
        (cursor-frame (cffi:foreign-alloc '(:struct wl:listener))))
    (setf (cffi:foreign-slot-value cursor-motion '(:struct wl:listener) :notify)
          (cffi:callback server-cursor-motion)
          (cffi:foreign-slot-value cursor-motion-absolute '(:struct wl:listener) :notify)
          (cffi:callback server-cursor-motion-absolute)
          (cffi:foreign-slot-value cursor-button '(:struct wl:listener) :notify)
          (cffi:callback server-cursor-button)
          (cffi:foreign-slot-value cursor-axis '(:struct wl:listener) :notify)
          (cffi:callback server-cursor-axis)
          (cffi:foreign-slot-value cursor-frame '(:struct wl:listener) :notify)
          (cffi:callback server-cursor-frame))
    (wl:signal-add (wlr:event-signal *cursor* wlr:cursor :motion)
                   cursor-motion)
    (wl:signal-add (wlr:event-signal *cursor* wlr:cursor :motion-absolute)
                   cursor-motion-absolute)
    (wl:signal-add (wlr:event-signal *cursor* wlr:cursor :button)
                   cursor-button)
    (wl:signal-add (wlr:event-signal *cursor* wlr:cursor :axis)
                   cursor-axis)
    (wl:signal-add (wlr:event-signal *cursor* wlr:cursor :frame)
                   cursor-frame))
  
  (let ((new-input (cffi:foreign-alloc '(:struct wl:listener))))
    (setf (cffi:foreign-slot-value new-input '(:struct wl:listener) :notify)
          (cffi:callback server-new-input))
    (wl:signal-add (wlr:event-signal *backend* wlr:backend :new-input)
                   new-input))
  (setf *seat* (wlr:seat-create *display* "seat0"))
  (let ((request-set-cursor (cffi:foreign-alloc '(:struct wl:listener)))
        (request-set-selection (cffi:foreign-alloc '(:struct wl:listener))))
    (setf (cffi:foreign-slot-value request-set-cursor '(:struct wl:listener) :notify)
          (cffi:callback seat-request-set-cursor)
          (cffi:foreign-slot-value request-set-selection '(:struct wl:listener) :notify)
          (cffi:callback seat-request-set-selection))
    (wl:signal-add (wlr:event-signal *seat* wlr:seat :request-set-cursor)
                   request-set-cursor)
    (wl:signal-add (wlr:event-signal *seat* wlr:seat :request-set-selection)
                   request-set-selection))

  (let ((socket (wl:display-add-socket-auto *display*)))
    (unless socket
      (error "Failed to add socket to Wayland display"))
    (format t "Wayland socket: ~a~%" socket)

    (unless (wlr:backend-start *backend*)
      (error "Failed to start backend"))
    
    (sb-posix:setenv "WAYLAND_DISPLAY" socket 1)
    (format t "Running Wayland compositor on WAYLAND_DISPLAY=~A~%" socket)
    (wl:display-run *display*))
  
  (wl:display-destroy-clients *display*)
  (wlr:scene-node-destroy (cffi:foreign-slot-value 
                            (cffi:foreign-slot-value *scene* '(:struct wlr:scene) :tree)
                             '(:struct wlr:scene-tree)
                             :node))
  (wlr:xcursor-manager-destroy *cursor-manager*)
  (wlr:cursor-destroy *cursor*)
  (wlr:allocator-destroy *allocator*)
  (wlr:renderer-destroy *renderer*)
  (wlr:backend-destroy *backend*)
  (wl:display-destroy *display*))

(export 'main)