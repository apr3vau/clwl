(defpackage "TINYWL"
  (:use "CL"))
(in-package "TINYWL")

(defvar *display* nil)
(defvar *backend* nil)
(defvar *renderer* nil)
(defvar *allocator* nil)
(defvar *output-layout* nil)
(defvar *scene* nil)
(defvar *scene-layout* nil)
(defvar *xdg-shell* nil)
(defvar *cursor* nil)
(defvar *cursor-manager* nil)
(defvar *cursor-mode* :passthrough)
(defvar *seat* nil)

(defvar *new-output-listener* nil)
(defvar *new-xdg-toplevel* nil)
(defvar *new-xdg-popup* nil)
(defvar *cursor-motion* nil)
(defvar *cursor-motion-absolute* nil)
(defvar *cursor-button* nil)
(defvar *cursor-axis* nil)
(defvar *cursor-frame* nil)
(defvar *new-input-listener* nil)
(defvar *request-set-cursor-listener* nil)
(defvar *request-set-selection-listener* nil)

(defvar *keyboards* nil)
(defstruct keyboard wlr-keyboard modifiers key destroy)

(defvar *focused-toplevel* nil)
(defvar *toplevels* nil)
(defstruct toplevel xdg-toplevel scene-tree map unmap commit destroy
                    request-move request-resize request-maximize request-fullscreen)

(cffi:defcallback server-new-output :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "New output created~%"))

(cffi:defcallback server-new-xdg-toplevel :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "New XDG toplevel created~%"))

(cffi:defcallback server-new-xdg-popup :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "New XDG popup created~%"))

(cffi:defcallback keyboard-handle-modifiers :void ((listener :pointer) (data :pointer))
  (declare (ignore data))
  (format t "Keyboard modifiers changed~%")
  (let ((kb (find-if (lambda (k) (cffi:pointer-eq (keyboard-modifiers k) listener)) *keyboards*)))
    (when kb
      (wlr:seat-set-keyboard *seat* (keyboard-wlr-keyboard kb))
      (wlr:seat-keyboard-notify-modifiers
       *seat*
       (cffi:foreign-slot-pointer (keyboard-wlr-keyboard kb) '(:struct wlr:keyboard) :modifiers)))))

(defun focus-toplevel (toplevel)
  (when toplevel
    (let ((prev-surface (cffi:foreign-slot-pointer
                         (cffi:foreign-slot-pointer *seat* '(:struct wlr:seat) :keyboard-state)
                         '(:struct wlr:seat-keyboard-state)
                         :focused-surface))
          (surface (cffi:foreign-slot-pointer
                    (cffi:foreign-slot-pointer (toplevel-xdg-toplevel toplevel) '(:struct wlr:xdg-toplevel) :base)
                    '(:struct wlr:xdg-surface)
                    :surface)))
      (unless (cffi:pointer-eq prev-surface surface)
        (unless (cffi:null-pointer-p prev-surface)
          (let ((prev-toplevel (wlr:xdg-toplevel-try-from-wlr-surface prev-surface)))
            (when prev-toplevel
              (wlr:xdg-toplevel-set-activated prev-toplevel nil))))
        (wlr:scene-node-raise-to-top (cffi:foreign-slot-pointer (toplevel-scene-tree toplevel)
                                                                '(:struct wlr:scene-tree)
                                                                :node))
        (wlr:xdg-toplevel-set-activated (toplevel-xdg-toplevel toplevel) t)
        (let ((keyboard (wlr:seat-get-keyboard *seat*)))
          (when keyboard
            (wlr:seat-keyboard-notify-enter
             *seat*
             surface
             (cffi:foreign-slot-value keyboard '(:struct wlr:keyboard) :keycodes)
             (cffi:foreign-slot-value keyboard '(:struct wlr:keyboard) :num-keycodes)
             (cffi:foreign-slot-value keyboard '(:struct wlr:keyboard) :modifiers))))))))

(defun handle-keybinding (keycode)
  (format t "Keycode: ~a~%" keycode)
  (case keycode
    (9 (format t "Escape key pressed, exiting...~%")
       (wl:display-terminate *display*)
       t)
    (67 (format t "F1 key pressed, switching toplevel")
        (when (> (length *toplevels*) 1)
          (focus-toplevel (nth (mod (+ (position *focused-toplevel* *toplevels*) 1)
                               (length *toplevels*))
                             *toplevels*))))))

(cffi:defcallback keyboard-handle-key :void ((listener :pointer) (data :pointer))
  (format t "Keyboard key event~%")
  (let ((kb (find-if (lambda (k) (cffi:pointer-eq (keyboard-key k) listener)) *keyboards*))
        (keycode (+ (cffi:foreign-slot-value data '(:struct wlr:keyboard-key-event) :keycode) 8)))
    (when kb
      (let* ((modifiers (wlr:keyboard-get-modifiers (keyboard-wlr-keyboard kb)))
             handled)
        (when (and (logand modifiers (cffi:foreign-enum-value 'wlr:keyboard-modifier :alt))
                   (eql (cffi:foreign-slot-value data '(:struct wlr:keyboard-key-event) :state)
                        (cffi:foreign-enum-value 'wl:keyboard-key-state :pressed)))
          (setf handled (handle-keybinding keycode)))
        (unless handled
          (wlr:seat-set-keyboard *seat* (keyboard-wlr-keyboard kb))
          (wlr:seat-keyboard-notify-key
           *seat*
           (cffi:foreign-slot-value data '(:struct wlr:keyboard-key-event) :time-msec)
           (cffi:foreign-slot-value data '(:struct wlr:keyboard-key-event) :keycode)
           (cffi:foreign-slot-value data '(:struct wlr:keyboard-key-event) :state)))))))

(cffi:defcallback keyboard-handle-destroy :void ((listener :pointer) (data :pointer))
  (declare (ignore data))
  (let* ((kb (find-if (lambda (k) (cffi:pointer-eq (keyboard-destroy k) listener)) *keyboards*)))
    (when kb
      (setf *keyboards* (remove kb *keyboards*))
      (wl:list-remove (cffi:foreign-slot-pointer (keyboard-modifiers kb) '(:struct wl:listener) :link))
      (wl:list-remove (cffi:foreign-slot-pointer (keyboard-key kb) '(:struct wl:listener) :link))
      (wl:list-remove (cffi:foreign-slot-pointer (keyboard-destroy kb) '(:struct wl:listener) :link))))
  (format t "Keyboard destroyed~%"))

(defun server-new-keyboard (device)
  (let* ((wlr-keyboard (wlr:keyboard-from-input-device device))
         (context (wl-util:xkb-context-new (cffi:foreign-enum-value 'wl-util:xkb-context-flags :no-flags)))
         (keymap (wl-util:xkb-keymap-new-from-names
                  context (cffi:null-pointer)
                  (cffi:foreign-enum-value 'wl-util:xkb-keymap-compile-flags :no-flags)))
         (modifiers (cffi:foreign-alloc '(:struct wl:listener)))
         (key (cffi:foreign-alloc '(:struct wl:listener)))
         (destroy (cffi:foreign-alloc '(:struct wl:listener)))
         (kb (make-keyboard :wlr-keyboard wlr-keyboard
                            :modifiers modifiers
                            :key key
                            :destroy destroy)))
    (wlr:keyboard-set-keymap wlr-keyboard keymap)
    (wl-util:xkb-keymap-unref keymap)
    (wl-util:xkb-context-unref context)
    (wlr:keyboard-set-repeat-info wlr-keyboard 25 600)

    (setf (cffi:foreign-slot-value modifiers '(:struct wl:listener) :notify)
          (cffi:callback keyboard-handle-modifiers)
          (cffi:foreign-slot-value key '(:struct wl:listener) :notify)
          (cffi:callback keyboard-handle-key)
          (cffi:foreign-slot-value destroy '(:struct wl:listener) :notify)
          (cffi:callback keyboard-handle-destroy))
    (wl:signal-add (wlr:event-signal wlr-keyboard wlr:keyboard :modifiers)
                   modifiers)
    (wl:signal-add (wlr:event-signal wlr-keyboard wlr:keyboard :key)
                   key)
    (wl:signal-add (wlr:event-signal device wlr:input-device :destroy)
                   destroy)
    (push kb *keyboards*)))

(defun server-new-pointer (device)
  (wlr:cursor-attach-input-device *cursor* device))

(cffi:defcallback server-new-input :void ((listener :pointer) (data :pointer))
  (declare (ignore listener))
  (cffi:with-foreign-slots (((type :type)) data (:struct wlr:input-device))
    (cond
      ((eql type (cffi:foreign-enum-value 'wlr:input-device-type :keyboard))
       (format t "New keyboard input device~%")
       (server-new-keyboard data))
      ((eql type (cffi:foreign-enum-value 'wlr:input-device-type :pointer))
       (format t "New pointer input device~%")
       (server-new-pointer data)))
  (let ((caps (cffi:foreign-enum-value 'wl:seat-capability :pointer)))
    (unless *keyboards*
      (setf caps (logior caps (cffi:foreign-enum-value 'wl:seat-capability :keyboard))))
    (wlr:seat-set-capabilities *seat* caps))))

(cffi:defcallback server-cursor-motion :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Cursor motion event~%"))

(cffi:defcallback server-cursor-motion-absolute :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Cursor absolute motion event~%"))

(cffi:defcallback server-cursor-button :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Cursor button event~%"))

(cffi:defcallback server-cursor-axis :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Cursor axis event~%"))

(cffi:defcallback server-cursor-frame :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Cursor frame event~%"))

(cffi:defcallback seat-request-set-cursor :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Seat requested set cursor~%"))

(cffi:defcallback seat-request-set-selection :void ((listener :pointer) (data :pointer))
  (declare (ignore listener data))
  (format t "Seat requested set selection~%"))

(defun main ()
  (setf *display* (wl:display-create))
  (when (cffi:null-pointer-p *display*)
    (error "Failed to create Wayland display"))
  (setf *backend* (wlr:backend-autocreate (wl:display-get-event-loop *display*)
                                          (cffi:null-pointer)))
  (when (cffi:null-pointer-p *backend*)
    (error "Failed to create wlr_backend"))
  (setf *renderer* (wlr:renderer-autocreate *backend*))
  (when (cffi:null-pointer-p *renderer*)
    (error "Failed to create wlr_renderer"))
  (wlr:renderer-init-wl-display *renderer* *display*)
  (setf *allocator* (wlr:allocator-autocreate *backend* *renderer*))
  (when (cffi:null-pointer-p *allocator*)
    (error "Failed to create wlr_allocator"))
  (wlr:compositor-create *display* 5 *renderer*)
  (wlr:subcompositor-create *display*)
  (wlr:data-device-manager-create *display*)

  (setf *output-layout* (wlr:output-layout-create *display*))
  (setf *new-output-listener* (cffi:foreign-alloc '(:struct wl:listener)))
  (setf (cffi:foreign-slot-value *new-output-listener* '(:struct wl:listener) :notify)
        (cffi:callback server-new-output))
  (wl:signal-add (wlr:event-signal *backend* wlr:backend :new-output)
                 *new-output-listener*)
  
  (setf *scene* (wlr:scene-create))
  (setf *scene-layout* (wlr:scene-attach-output-layout *scene* *output-layout*))
  
  (setf *xdg-shell* (wlr:xdg-shell-create *display* 3))
  (setf *new-xdg-toplevel* (cffi:foreign-alloc '(:struct wl:listener))
        *new-xdg-popup* (cffi:foreign-alloc '(:struct wl:listener)))
  (setf (cffi:foreign-slot-value *new-xdg-toplevel* '(:struct wl:listener) :notify)
        (cffi:callback server-new-xdg-toplevel)
        (cffi:foreign-slot-value *new-xdg-popup* '(:struct wl:listener) :notify)
        (cffi:callback server-new-xdg-popup))
  (wl:signal-add (wlr:event-signal *xdg-shell* wlr:xdg-shell :new-toplevel)
                 *new-xdg-toplevel*)
  (wl:signal-add (wlr:event-signal *xdg-shell* wlr:xdg-shell :new-popup)
                 *new-xdg-popup*)

  (setf *cursor* (wlr:cursor-create))
  (wlr:cursor-attach-output-layout *cursor* *output-layout*)
  (setf *cursor-manager* (wlr:xcursor-manager-create (cffi:null-pointer) 24))

  (setf *cursor-motion* (cffi:foreign-alloc '(:struct wl:listener))
        *cursor-motion-absolute* (cffi:foreign-alloc '(:struct wl:listener))
        *cursor-button* (cffi:foreign-alloc '(:struct wl:listener))
        *cursor-axis* (cffi:foreign-alloc '(:struct wl:listener))
        *cursor-frame* (cffi:foreign-alloc '(:struct wl:listener)))
  (setf (cffi:foreign-slot-value *cursor-motion* '(:struct wl:listener) :notify)
        (cffi:callback server-cursor-motion)
        (cffi:foreign-slot-value *cursor-motion-absolute* '(:struct wl:listener) :notify)
        (cffi:callback server-cursor-motion-absolute)
        (cffi:foreign-slot-value *cursor-button* '(:struct wl:listener) :notify)
        (cffi:callback server-cursor-button)
        (cffi:foreign-slot-value *cursor-axis* '(:struct wl:listener) :notify)
        (cffi:callback server-cursor-axis)
        (cffi:foreign-slot-value *cursor-frame* '(:struct wl:listener) :notify)
        (cffi:callback server-cursor-frame))
    (wl:signal-add (wlr:event-signal *cursor* wlr:cursor :motion)
                   *cursor-motion*)
    (wl:signal-add (wlr:event-signal *cursor* wlr:cursor :motion-absolute)
                   *cursor-motion-absolute*)
    (wl:signal-add (wlr:event-signal *cursor* wlr:cursor :button)
                   *cursor-button*)
    (wl:signal-add (wlr:event-signal *cursor* wlr:cursor :axis)
                   *cursor-axis*)
    (wl:signal-add (wlr:event-signal *cursor* wlr:cursor :frame)
                   *cursor-frame*)

  (setf *new-input-listener* (cffi:foreign-alloc '(:struct wl:listener)))
  (setf (cffi:foreign-slot-value *new-input-listener* '(:struct wl:listener) :notify)
        (cffi:callback server-new-input))
  (wl:signal-add (wlr:event-signal *backend* wlr:backend :new-input)
                 *new-input-listener*)
  (setf *seat* (wlr:seat-create *display* "seat0"))
  (setf *request-set-cursor-listener* (cffi:foreign-alloc '(:struct wl:listener))
        *request-set-selection-listener* (cffi:foreign-alloc '(:struct wl:listener)))
  (setf (cffi:foreign-slot-value *request-set-cursor-listener* '(:struct wl:listener) :notify)
        (cffi:callback seat-request-set-cursor)
        (cffi:foreign-slot-value *request-set-selection-listener* '(:struct wl:listener) :notify)
        (cffi:callback seat-request-set-selection))
  (wl:signal-add (wlr:event-signal *seat* wlr:seat :request-set-cursor)
                 *request-set-cursor-listener*)
  (wl:signal-add (wlr:event-signal *seat* wlr:seat :request-set-selection)
                 *request-set-selection-listener*)

  (let ((socket (wl:display-add-socket-auto *display*)))
    (unless socket
      (error "Failed to add socket to Wayland display"))
    (format t "Wayland socket: ~a~%" socket)

    (unless (wlr:backend-start *backend*)
      (error "Failed to start backend"))
    
    (sb-posix:setenv "WAYLAND_DISPLAY" socket 1)
    (format t "Running Wayland compositor on WAYLAND_DISPLAY=~A~%" socket)
    (wl:display-run *display*))

  (wl:list-remove (cffi:foreign-slot-pointer *new-output-listener* '(:struct wl:listener) :link))
  (wl:list-remove (cffi:foreign-slot-pointer *new-xdg-toplevel* '(:struct wl:listener) :link))
  (wl:list-remove (cffi:foreign-slot-pointer *new-xdg-popup* '(:struct wl:listener) :link))
  (wl:list-remove (cffi:foreign-slot-pointer *cursor-motion* '(:struct wl:listener) :link))
  (wl:list-remove (cffi:foreign-slot-pointer *cursor-motion-absolute* '(:struct wl:listener) :link))
  (wl:list-remove (cffi:foreign-slot-pointer *cursor-button* '(:struct wl:listener) :link))
  (wl:list-remove (cffi:foreign-slot-pointer *cursor-axis* '(:struct wl:listener) :link))
  (wl:list-remove (cffi:foreign-slot-pointer *cursor-frame* '(:struct wl:listener) :link))
  (wl:list-remove (cffi:foreign-slot-pointer *new-input-listener* '(:struct wl:listener) :link))
  (wl:list-remove (cffi:foreign-slot-pointer *request-set-cursor-listener* '(:struct wl:listener) :link))
  (wl:list-remove (cffi:foreign-slot-pointer *request-set-selection-listener* '(:struct wl:listener) :link))
  
  (wl:display-destroy-clients *display*)
  (wlr:scene-node-destroy (cffi:foreign-slot-pointer
                            (cffi:foreign-slot-pointer *scene* '(:struct wlr:scene) :tree)
                             '(:struct wlr:scene-tree)
                             :node))
  (wlr:xcursor-manager-destroy *cursor-manager*)
  (wlr:cursor-destroy *cursor*)
  (wlr:allocator-destroy *allocator*)
  (wlr:renderer-destroy *renderer*)
  (wlr:backend-destroy *backend*)
  (wl:display-destroy *display*))

(export 'main)